@inherits BootstrapComponentBase
@using System.Timers
@implements IDisposable

<DynamicElement Attributes="@UnknownParameters" TagName="div" class="@classname" onmouseover="@onmouseover" onmouseout="@onmouseout">
    @ChildContent
</DynamicElement>

@functions {
    private string classname
    {
        get
        {
            return $"carousel slide {Class}";
        }
    }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [Parameter] private int Interval { get; set; } = 5000;
    [Parameter] private bool AutoSlide { get; set; } = true;
    [Parameter] private bool PauseOnHover { get; set; }

    [Parameter] private int NumberOfItems { get; set; }
    [Parameter] private int ActiveIndex { get; set; }
    [Parameter] private Action<int> ActiveIndexChanged { get; set; }

    private Timer _timer;

    protected override void OnInit()
    {
        if(AutoSlide && _timer == null)
        {
            _timer = new Timer(Interval);
            _timer.Elapsed += OnTimerEvent;
            _timer.AutoReset = true;
            _timer.Start();
        }
    }

    private void OnTimerEvent(Object source, ElapsedEventArgs e)
    {
        if (ActiveIndex == NumberOfItems - 1) ActiveIndex = 0;
        else ActiveIndex = ActiveIndex + 1;

        ActiveIndexChanged(ActiveIndex);
    }

    private void onmouseover()
    {
        if (PauseOnHover && _timer != null) _timer.Stop();
    }

    private void onmouseout()
    {
        if (PauseOnHover && _timer != null) _timer.Start();
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Dispose();
            _timer = null;
        }
    }
}